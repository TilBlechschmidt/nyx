stages: 
  - build
  - test
  - quality
  - deploy

.cacheconf: &cacheconf
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .cargo/
      - .cache/sccache
      - target/

compile:
  stage: build
  image: rust:1-slim
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo
    SCCACHE_DIR: $CI_PROJECT_DIR/.cache/sccache
    RUSTC_WRAPPER: $CARGO_HOME/bin/sccache
  script:
    - export PATH="$CI_PROJECT_DIR/.cargo/bin:$PATH"  # This must be done here or the stage will fail
    - cargo install sccache
    - cargo build --tests --release # Build all of the tests in release mode
    - cargo build --release # Build the binaries
  cache:
    <<: *cacheconf

unit-tests:
  stage: test
  image: rust:1-slim
  cache:
    <<: *cacheconf
  variables:
    RUST_BACKTRACE: 1
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check
    - cargo test --lib --release # Unit tests
    
mission-design-integration-tests:
  stage: test
  image: rust:1-slim
  cache:
    <<: *cacheconf
  variables:
    RUST_BACKTRACE: 1
  script:
    - cargo test cosmic --release
    - cargo test mission_design --release
    - cargo test monte_carlo --release

propulsion-integration-tests:
  stage: test
  image: rust:1-slim
  cache:
    <<: *cacheconf
  variables:
    RUST_BACKTRACE: 1
  script:
    - cargo test propulsion --release -j4 # Only on 4 CPUs otherwise the stack is totally used up
    - cargo test propagation --release -j4

propagation-integration-tests:
  stage: test
  image: rust:1-slim
  cache:
    <<: *cacheconf
  variables:
    RUST_BACKTRACE: 1
  script:
    - cargo test propagation --release -j4

orbit-determination-integration-tests:
  stage: test
  image: rust:1-slim
  cache:
    <<: *cacheconf
  variables:
    RUST_BACKTRACE: 1
  script:
    - cargo test orbit_determination --release

scenario-tests:
  image: rust:1-slim
  cache:
    <<: *cacheconf
  script:
    - cargo run --release -- data/simple-scenario.toml --all
    # Check that when we do a unit conversion it's correct
    # NOTE: We don't do that with km output because the unit conversion leads to some rounding issues
    - diff ./data/scenario-run-cm.csv ./data/scenario-run-m.csv
    - cargo run --release -- data/simple-od-scenario.toml
    - cargo run --release -- "data/od_validation/*" -a
    - cargo run --release -- data/iss-example.toml -s iss_cond

pages:
  stage: deploy
  image: rust:1.51.0-bullseye
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/cargo
  cache:
    paths:
      - target/
      - cargo/
  before_script:
    - rustup component add rustfmt
  script:
    - mkdir -p public
    - cargo doc --verbose --no-deps --release
    - cp -R target/doc/* ./public/
    - cp docs/index.html ./public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual

fmt_and_lint:
  stage: quality
  image: rust:1-slim
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check
    - rustup component add clippy
    - cargo clippy

audit:
  stage: quality
  image: rust:1-slim
  script:
    - cargo install cargo-audit
    - cargo audit

# Code from https://www.collabora.com/news-and-blog/blog/2021/03/24/rust-integrating-llvm-source-base-code-coverage-with-gitlab/
coverage:
  stage: quality
  image: "rustdocker/rust:nightly"  # Eventually switch to rust-1-slim and add python
  cache:
    <<: *cacheconf
  variables:
    RUSTFLAGS: "-Zinstrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - rustup component add llvm-tools-preview
    - cargo test
    - cargo install grcov
    - grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --ignore "*cargo*" -o ./coverage/ # generate html report
    - pip3 install lcov_cobertura # generate cobertura report for gitlab integration
    - grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
    - python3 /usr/local/lib/python3.5/dist-packages/lcov_cobertura.py coverage.lcov
    - apt-get update && apt-get install -y lcov # output coverage summary for gitlab parsing
    - lcov --summary coverage.lcov
  artifacts:
    paths:
      - 'coverage'
    reports:
      cobertura: coverage.xml